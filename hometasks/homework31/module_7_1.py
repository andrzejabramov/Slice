"""
Создаем класс Product с атрибутами имя, вес, категория,
магическим методом  __str__() организуем вывод на экран значения атрибутов
"""
class Product:
    def __init__(self, name, weight, category):
        self.name = name
        self.weight = weight
        self.category = category
    def __str__(self):
        return f"{self.name}, {self.weight}, {self.category}"

"""
Создаем класс Shop с инкапсулированным атрибутом - имя файла и методами add и get_products  
"""
class Shop:
    def __init__(self):
        self.__file_name = 'products.txt'

    def get_products(self):
        n = 0 #стартовое значение поиска по строкам файла, используем для определения позиций символа \n
        lst = [] #начальное пустое значение списка наименований продуктов, специальное создаем итератор для поиска по его первому элементу - имени
        file = open(self.__file_name, 'r') #открываем файл на чтение
        text = file.read() #читаем и сохраняем считанное в переменную text
        file.close() #закрываем
        for i in text: #проходим циклом по тексту из файла
            a = text.find('\n', n) #закружаем в переменную a индекс первого символа \n
            tx = text[n:a].split(',')[0] #в переменную tx сохраняем слайс текста от старта (n) до идекса символа \n
            if tx != '': #если строка не пустая:
                lst.append(tx) #добавляем в список
            if a == -1: #если поиск окончен - выходим из цикла
                break
            n = a + 1 #присваиваем значению старт поиска следующее значение после очередного символа \n
        lst = ', '.join(lst) #превращаем список в строку для вывода в консоль списка продуктов
        return lst
    def add(self, *products): #метод принимает неограниченное количество экземпляров класса Product
        for prod in products: # проходим по ним циклом для проверки есть ли в магазине какой либо из этих товаров
            l = self.get_products() #задаем шаблон для проверки из метода get_product()
            n = prod.__str__().split(',') #разделяем набор товаров с атрибутоами по товарам
            if n[0] in l: #если первый элемент (имя) присутствует из набора товаров примутствует в шаблоне
                print(f"Продукт {n[0]} уже есть в магазине")
            else: #иначе (без else не обойтись, потому что нам надо пройтись обязатедльно по всему циклу)
                file = open(self.__file_name, 'a') #открываем файл
                file.write(','.join(n) + '\n') #записываем товар с его атрибутоми
                file.close() #закрываем файл
                print(f"Продукт добавлен")
        return ''

s = Shop() #создаем экземпляр класса магазин
p1 = Product('Potato', 50.0, 'Vagetables') #задаем три экземляра класса Product
p2 = Product('Spaghetti', 3.4, 'Groceries')
p3 = Product('Potato', 5.5, 'Vegetables')
print(p2)  #распечатываем один из экземпляров
s.add(p1, p2, p3) #добавляем три продукта в метод add
print(s.get_products())  #смотрим, что добавилось в файле
